generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_LOCAL")
}

model User {
  //--------------------------------------------------------
  // Metadata
  id                 Int      @id @default(autoincrement())
  nanoid             String   @unique
  clerkId            String   @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
  //--------------------------------------------------------
  // Data
  email              String   @unique
  username           String   @unique
  // Profile Data
  firstName          String?
  lastName           String?
  description        String?
  languages          String[]
  countriesOfOrigin  String[]
  statesOfOrigin     String[]
  citiesOfOrigin     String[]
  countryOfResidence String?
  stateOfResidence   String?
  citiesOfResidence  String?
  socialsLinks       Json?
  socialsUsers       Json?
  age                Int?
  imageLink          String?
  ratePerHour        Decimal?
  //--------------------------------------------------------
  // Rank Data
  elo                Decimal?
  //--------------------------------------------------------
  // Status
  isAdmin            Boolean  @default(false)
  isTeacher          Boolean  @default(false)
  //--------------------------------------------------------
  blackGames         Game[]   @relation("blackPlayer")
  whiteGames         Game[]   @relation("whitePlayer")
  wins               Game[]   @relation("winnerPlayer")
}

model Game {
  //--------------------------------------------------------
  // Metadata
  id                  Int         @id @default(autoincrement())
  nanoid              String      @unique
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @default(now())
  //--------------------------------------------------------
  // Data
  dateTime            DateTime
  // Result
  result              String
  resultColor         String
  resultByResignation Boolean
  resultByPoints      Decimal?
  resultByTime        Boolean     @default(false)
  // Elo
  ranked              Boolean     @default(true)
  isolatedElo         Boolean     @default(false)
  eloBlack            Decimal
  eloDeltaBlack       Decimal
  bonusEloBlack       Decimal
  eloWhite            Decimal
  eloDeltaWhite       Decimal
  bonusEloWhite       Decimal
  // Extra Info
  komi                Decimal     @default(6.5)
  rules               String      @default("Japanese")
  handicapStones      Int         @default(0)
  handicapPoints      Decimal     @default(0)
  extraInfo           String?
  sgf                 String?
  ogsLink             String?
  aiSenseiLink        String?
  otherLinks          Json?
  //--------------------------------------------------------
  // Relationships
  winner              User        @relation("winnerPlayer", fields: [winnerId], references: [id])
  winnerId            Int
  black               User        @relation("blackPlayer", fields: [blackId], references: [id])
  blackId             Int
  white               User        @relation("whitePlayer", fields: [whiteId], references: [id])
  whiteId             Int
  tournament          Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId        Int?
  //--------------------------------------------------------
}

model Tournament {
  //--------------------------------------------------------
  // Metadata
  id         Int      @id @default(autoincrement())
  nanoid     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  //--------------------------------------------------------
  // Data
  startTime  DateTime
  endTime    DateTime
  link       String?
  otherLinks Json?
  //--------------------------------------------------------
  // Relationships
  Game       Game[]
  //--------------------------------------------------------
}
